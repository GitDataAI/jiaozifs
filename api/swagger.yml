openapi: "3.0.0"

info:
  description: jiaozifs HTTP API
  title: jiaozifs API
  license:
    name: "Apache 2.0"
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: "http://localhost:34913/api/v1"
    description: jiaozifs server endpoint
  - url: "/api/v1"
    description: jiaozifs server endpoint
security:
  - jwt_token: [] # Default security for the entire API
  - basic_auth: []
  - cookie_auth: []
components:
  parameters:
    PaginationPrefix:
      in: query
      name: prefix
      description: return items prefixed with this value
      schema:
        type: string

    PaginationAfter:
      in: query
      name: after
      description: return items after this value
      schema:
        type: string

    PaginationAmount:
      in: query
      name: amount
      description: how many items to return
      schema:
        type: integer
        minimum: -1
        maximum: 1000
        default: 100

    PaginationDelimiter:
      in: query
      name: delimiter
      description: delimiter used to group common prefixes by
      schema:
        type: string

  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookie_auth:
      type: apiKey
      in: cookie
      name: internal_auth_session


  schemas:
    LoginConfig:
      type: object
      properties:
        RBAC:
          description: |
            RBAC will remain enabled on GUI if "external".  That only works
            with an external auth service.
          type: string
          enum: [ simplified, external ]
        login_url:
          description: primary URL to use for login.
          type: string
        login_failed_message:
          description: |
            message to display to users who fail to login; a full sentence that is rendered
            in HTML and may contain a link to a secondary login method
          type: string
        fallback_login_url:
          description: secondary URL to offer users to use for login.
          type: string
        fallback_login_label:
          description: label to place on fallback_login_url.
          type: string
        login_cookie_names:
          description: cookie names used to store JWT
          type: array
          items:
            type: string
        logout_url:
          description: URL to use for logging out.
          type: string
      required:
        - login_url
        - login_cookie_names
        - logout_url
    SetupState:
      type: object
      properties:
        state:
          type: string
          enum: [ initialized, not_initialized ]
        comm_prefs_missing:
          type: boolean
          description: true if the comm prefs are missing.
        login_config:
          $ref: "#/components/schemas/LoginConfig"
    BranchCreation:
      type: object
      required:
        - name
        - source
      properties:
        name:
          type: string
        source:
          type: string
    Ref:
      type: object
      required:
        - ID
        - RepositoryID
        - CommitHash
        - Name
        - CreatorID
        - CreatedAt
        - UpdatedAt
      properties:
        ID :
          type: string
          format: uuid
        RepositoryID:
          type: string
          format: uuid
        CommitHash:
          type: string
        Name :
          type: string
        Description :
          type: string
        CreatorID:
          type: string
          format: uuid
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    RefList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Ref"
    CreateRepository:
      type: object
      required:
        - Name
      properties:
        Description:
          type: string
        Name:
          type: string
    UpdateRepository:
      type: object
      properties:
        Description:
          type: string
    RepositoryList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Repository"
    Repository:
      type: object
      required:
        - ID
        - Name
        - Head
        - CreatorID
        - CreatedAt
        - UpdatedAt
      properties:
        ID:
          type: string
          format: uuid
        Name:
          type: string
        Head:
          type: string
        Description:
          type: string
        CreatorID:
          type: string
          format: uuid
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    Blob:
      type: object
      required:
        - Hash
        - Type
        - CheckSum
        - Properties
        - Size
        - CreatedAt
        - UpdatedAt
      properties:
        Hash:
          type: string
        CheckSum:
          type: string
        Type:
          type: integer
          format: int8
        Properties:
          type: object
          additionalProperties:
            type: string
        Size:
          type: integer
          format: int64
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    Signature:
      type: object
      required:
        - Name
        - Email
        - When
      properties:
        Name:
          type: string
        Email:
          type: string
          format: email
        When:
          type: string
          format: date-time
    Commit:
      type: object
      required:
        - Hash
        - Type
        - Author
        - Committer
        - MergeTag
        - Message
        - TreeHash
        - ParentHashes
        - CreatedAt
        - UpdatedAt
      properties:
        Hash:
          type: string
        Author:
          $ref: "#/components/schemas/Signature"
        Committer:
          $ref: "#/components/schemas/Signature"
        MergeTag:
          type: string
        Message:
          type: string
        TreeHash:
          type: string
        ParentHashes:
          type: array
          items:
            type: string
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    TreeEntry:
      type: object
      properties:
        Name:
          type: string
        Hash:
          type: string
        IsDir:
          type: boolean
    TreeNode:
      type: object
      required:
        - Hash
        - Type
        - Properties
        - SubObjects
        - CreatedAt
        - UpdatedAt
      properties:
        Hash:
          type: string
        Type:
          type: integer
          format: int8
        Properties:
          type: object
          additionalProperties:
            type: string
        SubObjects:
          type: array
          items:
            $ref: "#/components/schemas/TreeEntry"
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    Wip:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        Name:
          type: string
        CurrentTree:
          type: string
        BaseCommit:
          type: string
        RepositoryID:
          type: string
          format: uuid
        State:
          type: integer
          format: int
        CreatorID:
          type: string
          format: uuid
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
    Change:
      type: object
      required:
        - Path
        - Action
      properties:
        Path:
          type: string
        Action:
          type: integer
          format: int
        BaseHash:
          type: string
        ToHash:
          type: string
    UserUpdate:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    UserInfo:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        currentSignInAt:
          type: string
          format: date-time
        lastSignInAt:
          type: string
          format: date-time
        currentSignInIP:
          type: string
          format: ipv4
        lastSignInIP:
          type: string
          format: ipv4
        createdAt:
          type: string
          format: date-time
        updateAt:
          type: string
          format: date-time
    UserRegisterInfo:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        password:
          type: string
          minLength: 8
        email:
          type: string
          format: email
    AuthenticationToken:
      type: object
      required:
        - token
      properties:
        token:
          description: a JWT token that could be used to authenticate requests
          type: string
        token_expiration:
          type: integer
          format: int64
          description: Unix Epoch in seconds
    VersionResult:
      type: object
      required:
        - version
        - api_version
      properties:
        version:
          type: string
          description: program version
        api_version:
          type: string
          description: runtime version
        latest_version:
          type: string
    ObjectUserMetadata:
      type: object
      additionalProperties:
        type: string

    ObjectStats:
      type: object
      required:
        - checksum
        - path
        - path_type
        - mtime
      properties:
        path:
          type: string
        path_mode:
          type: integer
          format: uint32
        checksum:
          type: string
        size_bytes:
          type: integer
          format: int64
        mtime:
          type: integer
          format: int64
          description: Unix Epoch in seconds
        metadata:
          $ref: "#/components/schemas/ObjectUserMetadata"
        content_type:
          type: string
          description: Object media type

    ObjectStatsList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ObjectStats"

    Pagination:
      type: object
      required:
        - has_more
        - max_per_page
        - results
        - next_offset
      properties:
        has_more:
          type: boolean
          description: Next page is available
        next_offset:
          type: string
          description: Token used to retrieve the next page
        results:
          type: integer
          minimum: 0
          description: Number of values found in the results
        max_per_page:
          type: integer
          minimum: 0
          description: Maximal number of entries per page

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: short message explaining the error
          type: string
paths:
  /version:
    get:
      tags:
        - common
      operationId: getVersion
      summary: return program and runtime version
      security: [] # No authentication
      responses:
        200:
          description: program version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionResult"

  /setup:
    get:
      tags:
        - common
      operationId: getSetupState
      summary: check if jiaozifs setup
      security: []
      responses:
        200:
          description: jiaozifs setup state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetupState"
        420:
          description: too many requests
        503:
          description: service unavailable

  /object/{owner}/{repository}:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
      - in: query
        name: branch
        description: branch to the ref
        required: true
        schema:
          type: string
      - in: query
        name: path
        description: relative to the ref
        required: true
        schema:
          type: string
    get:
      tags:
        - objects
      operationId: getObject
      summary: get object content
      parameters:
        - in: header
          name: Range
          description: Byte range to retrieve
          example: "bytes=0-1023"
          required: false
          schema:
            type: string
            pattern: '^bytes=((\d*-\d*,? ?)+)$'
      responses:
        200:
          description: object content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        206:
          description: partial object content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Content-Range:
              schema:
                type: string
                pattern: '^bytes=((\d*-\d*,? ?)+)$'
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        302:
          description: Redirect to a pre-signed URL for the object
          headers:
            Location:
              schema:
                type: string
        401:
          description: Unauthorized
        404:
          description: object not found
        410:
          description: object expired
        416:
          description: Requested Range Not Satisfiable
        420:
          description: too many requests
    head:
      tags:
        - objects
      operationId: headObject
      summary: check if object exists
      parameters:
        - in: header
          name: Range
          description: Byte range to retrieve
          example: "bytes=0-1023"
          required: false
          schema:
            type: string
            pattern: '^bytes=((\d*-\d*,? ?)+)$'
      responses:
        200:
          description: object exists
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        206:
          description: partial object content info
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Content-Range:
              schema:
                type: string
                pattern: '^bytes=((\d*-\d*,? ?)+)$'
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        401:
          description: Unauthorized
        404:
          description: object not found
        410:
          description: object expired
        416:
          description: Requested Range Not Satisfiable
        420:
          description: too many requests
        default:
          description: internal server error
    post:
      tags:
        - objects
      operationId: uploadObject
      x-validation-exclude-body: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  description: Only a single file per upload which must be named "content".
                  type: string
                  format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: object metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectStats"
        400:
          description: ValidationError
        401:
          description: Unauthorized ValidationError
        403:
          description: Forbidden
        404:
          description: url not found
        412:
          description: PreconditionFailed
        420:
          description: too many requests
    delete:
      tags:
        - objects
      operationId: deleteObject
      summary: delete object. Missing objects will not return a NotFound error.
      responses:
        204:
          description: object deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: NotFound
        420:
          description: too many requests

  /wip/{owner}/{repository}:
    parameters:
      - in: path
        name: repository
        required: true
        schema:
          type: string
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: query
        name: refName
        description: ref name
        required: true
        schema:
          type: string
    get:
      tags:
        - wip
      operationId: getWip
      summary: get working in process
      responses:
        200:
          description: working in process
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wip"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      tags:
        - wip
      operationId: deleteWip
      summary: remove working in process
      responses:
        200:
          description: success to delete wip
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      tags:
        - wip
      operationId: createWip
      summary: create working in process
      responses:
        201:
          description: working in process created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wip"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
        502:
          description: internal server error

  /wip/{owner}/{repository}/changes:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - wip
      operationId: getWipChanges
      summary: get working in process changes
      parameters:
        - in: query
          name: refName
          description: ref name
          required: true
          schema:
            type: string
        - in: query
          name: path
          description: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: working in process changes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Change"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /wip/{owner}/{repository}/commit:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
      - in: query
        name: refName
        description: ref name
        required: true
        schema:
          type: string
    post:
      tags:
        - wip
      operationId: commitWip
      summary: commit working in process to branch
      parameters:
        - in: query
          name: msg
          description: commit message
          required: false
          schema:
            type: string
      responses:
        200:
          description: commit success and response with new wip
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wip"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
        502:
          description: internal server error

  /wip/{owner}/{repository}/list:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - wip
      operationId: listWip
      summary: list wip in specific project and user
      responses:
        200:
          description: working in process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wip"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /repos/{owner}/{repository}/contents/:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - commit
      operationId: getEntriesInRef
      summary: list entries in ref
      parameters:
        - in: query
          name: path
          description: specific path, if not specific return entries in root
          required: false
          schema:
            type: string
        - in: query
          name: ref
          description: specific ref default to main branch
          required: false
          schema:
            type: string
      responses:
        200:
          description: commit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TreeEntry"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: url not found

  /repos/{owner}/{repository}/compare/{basehead}:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
      - in: path
        name: basehead
        required: true
        schema:
          type: string
    get:
      tags:
        - commit
      operationId: getCommitDiff
      summary: get commit differences
      parameters:
        - in: query
          name: path
          description: specific path, if not specific return entries in root
          required: false
          schema:
            type: string
      responses:
        200:
          description: commit diff
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Change"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        503:
          description: server internal error

  /repos/{owner}/{repository}/commits:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - repo
      operationId: getCommitsInRepository
      summary: get commits in repository
      parameters:
        - in: query
          name: refName
          description: ref(branch/tag) name
          required: false
          schema:
            type: string
      responses:
        200:
          description: get commits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Commit"

  /repos/{owner}/{repository}:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - repo
      operationId: getRepository
      summary: get repository
      responses:
        200:
          description: get repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      tags:
        - repo
      operationId: deleteRepository
      summary: delete repository
      responses:
        200:
          description: success to delete repository
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      tags:
        - repo
      operationId: updateRepository
      summary: update repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRepository"
      responses:
        200:
          description: success to update repository
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /users/{owner}/repos:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
    get:
      tags:
        - repo
      operationId: listRepository
      summary: list repository in specific owner
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: repository list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryList"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /users/repos:       # 必须授权
    get:
      tags:
        - repo
      operationId: listRepositoryOfAuthenticatedUser"
      summary: list repository
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: list repository
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RepositoryList"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      tags:
        - repo
      operationId: createRepository
      summary: create repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepository"
      responses:
        201:
          description: new repository
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
        400:
          description: ValidationError
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /repos/{owner}/{repository}/branches:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - branches
      operationId: listBranches
      summary: list branches
      parameters:
        - $ref: "#/components/parameters/PaginationPrefix"
        - $ref: "#/components/parameters/PaginationAfter"
        - $ref: "#/components/parameters/PaginationAmount"
      responses:
        200:
          description: branch list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefList"
        401:
          description: Unauthorized
        404:
          description: Resource Not Found
        420:
          description: Too many requests
        default:
          description: Internal Server Error


  /repos/{owner}/{repository}/branch:
    parameters:
      - in: path
        name: owner
        required: true
        schema:
          type: string
      - in: path
        name: repository
        required: true
        schema:
          type: string
    get:
      tags:
        - branches
      operationId: getBranch
      summary: get branch
      parameters:
        - in: query
          name: refName
          required: true
          schema:
            type: string
      responses:
        200:
          description: branch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ref"
        401:
          description: Unauthorized
        404:
          description: Resource Not Found
        420:
          description: Too many requests
        default:
          description: Internal Server Error
    delete:
      tags:
        - branches
      operationId: deleteBranch
      summary: delete branch
      parameters:
        - in: query
          name: refName
          required: true
          schema:
            type: string
      responses:
        204:
          description: branch delete successfully
        401:
          description: Unauthorized
        404:
          description: Resource Not Found
        420:
          description: Too many requests
        default:
         description: Internal Server Error
    post:
      tags:
        - branches
      operationId: createBranch
      summary: create branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchCreation"
      responses:
        201:
          description: create branch success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchCreation"
        400:
          description: ValidationError
        404:
          description: Resource Not Found
        409:
          description: Resource Conflicts With Target
        420:
          description: Too many requests
        default:
          description: Internal Server Error



  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: perform a login
      security: [] # No authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: successful login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "internal_auth_session=abcde12356; Path=/; HttpOnly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
        401:
          description: Unauthorized ValidationError
        420:
          description: too many requests
        default:
          description: Internal Server Error

  /auth/logout:
    post:
      tags:
        - auth
      operationId: logout
      summary: perform a logout
      responses:
        200:
          description: successful logout
        401:
          description: Unauthorized ValidationError
        420:
          description: too many requests
        default:
          description: Internal Server Error

  /users/register:
    post:
      tags:
        - auth
      operationId: register
      summary: perform user registration
      security: [] # No authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterInfo"
      responses:
        201:
          description: registration success
        400:
          description: Bad Request - Validation Error
        420:
          description: too many requests
        default:
          description: Internal Server Error

  /users/user:
    get:
      tags:
        - auth
      operationId: getUserInfo
      summary: get information of the currently logged-in user
      responses:
        200:
          description: Successful get of user Info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        401:
          description: Unauthorized
        403:
          description: Forbiden
        default:
          description: Internal Server Error
