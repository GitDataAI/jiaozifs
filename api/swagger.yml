openapi: "3.0.0"

info:
  description: jiaozifs HTTP API
  title: jiaozifs API
  license:
    name: "Apache 2.0"
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: "/api/v1"
    description: jiaozifs server endpoint

security:
  - jwt_token: ["aaaa"]
  - basic_auth: ["aaaaa"]
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookie_auth:
      type: apiKey
      in: cookie
      name: internal_auth_session
    oidc_auth:
      type: apiKey
      in: cookie
      name: oidc_auth_session
    saml_auth:
      type: apiKey
      in: cookie
      name: saml_auth_session
  schemas:
    UserUpdate:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserInfo:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        currentSignInAt:
          type: string
          format: date-time
        lastSignInAt:
          type: string
          format: date-time
        currentSignInIP:
          type: string
          format: ipv4
        lastSignInIP:
          type: string
          format: ipv4
        createdAt:
          type: string
          format: date-time
        updateAt:
          type: string
          format: date-time

    RegistrationMsg:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    UserRegisterInfo:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        password:
          type: string
          minLength: 8
        email:
          type: string
          format: email

    AuthenticationToken:
      type: object
      required:
        - token
      properties:
        token:
          description: a JWT token that could be used to authenticate requests
          type: string
        token_expiration:
          type: integer
          format: int64
          description: Unix Epoch in seconds

    VersionResult:
      type: object
      required:
        - version
        - api_version
      properties:
        version:
          type: string
          description: program version
        api_version:
          type: string
          description: runtime version
    ObjectUserMetadata:
      type: object
      additionalProperties:
        type: string

    ObjectStats:
      type: object
      required:
        - checksum
        - physical_address
        - path
        - path_type
        - mtime
      properties:
        path:
          type: string
        path_type:
          type: string
          enum: [common_prefix, object]
        physical_address:
          type: string
          description: |
            The location of the object on the underlying object store.
            Formatted as a native URI with the object store type as scheme ("s3://...", "gs://...", etc.)
            Or, in the case of presign=true, will be an HTTP URL to be consumed via regular HTTP GET
        physical_address_expiry:
          type: integer
          format: int64
          description: |
            If present and nonzero, physical_address is a pre-signed URL and
            will expire at this Unix Epoch time.  This will be shorter than
            the pre-signed URL lifetime if an authentication token is about
            to expire.

            This field is *optional*.
        checksum:
          type: string
        size_bytes:
          type: integer
          format: int64
        mtime:
          type: integer
          format: int64
          description: Unix Epoch in seconds
        metadata:
          $ref: "#/components/schemas/ObjectUserMetadata"
        content_type:
          type: string
          description: Object media type

    ObjectStatsList:
      type: object
      required:
        - pagination
        - results
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        results:
          type: array
          items:
            $ref: "#/components/schemas/ObjectStats"

    Pagination:
      type: object
      required:
        - has_more
        - max_per_page
        - results
        - next_offset
      properties:
        has_more:
          type: boolean
          description: Next page is available
        next_offset:
          type: string
          description: Token used to retrieve the next page
        results:
          type: integer
          minimum: 0
          description: Number of values found in the results
        max_per_page:
          type: integer
          minimum: 0
          description: Maximal number of entries per page
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: short message explaining the error
          type: string
paths:
  /version:
    get:
      tags:
        - common
      operationId: getVersion
      summary: return program and runtime version
      security:
        - jwt_token: []
      responses:
        200:
          description: program version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionResult"

  /repositories/{repository}/objects:
    parameters:
      - in: path
        name: repository
        required: true
        schema:
          type: string
      - in: query
        name: path
        description: relative to the ref
        required: true
        schema:
          type: string
    get:
      tags:
        - objects
      operationId: getObject
      summary: get object content
      parameters:
        - in: header
          name: Range
          description: Byte range to retrieve
          example: "bytes=0-1023"
          required: false
          schema:
            type: string
            pattern: '^bytes=((\d*-\d*,? ?)+)$'
        - in: query
          name: presign
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: object content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        206:
          description: partial object content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Content-Range:
              schema:
                type: string
                pattern: '^bytes=((\d*-\d*,? ?)+)$'
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        302:
          description: Redirect to a pre-signed URL for the object
          headers:
            Location:
              schema:
                type: string
        401:
          description: Unauthorized
        404:
          description: object not found
        410:
          description: object expired
        416:
          description: Requested Range Not Satisfiable
        420:
          description: too many requests
    head:
      tags:
        - objects
      operationId: headObject
      summary: check if object exists
      parameters:
        - in: header
          name: Range
          description: Byte range to retrieve
          example: "bytes=0-1023"
          required: false
          schema:
            type: string
            pattern: '^bytes=((\d*-\d*,? ?)+)$'
      responses:
        200:
          description: object exists
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        206:
          description: partial object content info
          headers:
            Content-Length:
              schema:
                type: integer
                format: int64
            Content-Range:
              schema:
                type: string
                pattern: '^bytes=((\d*-\d*,? ?)+)$'
            Last-Modified:
              schema:
                type: string
            ETag:
              schema:
                type: string
        401:
          description: Unauthorized
        404:
          description: object not found
        410:
          description: object expired
        416:
          description: Requested Range Not Satisfiable
        420:
          description: too many requests
        default:
          description: internal server error
    post:
      tags:
        - objects
      operationId: uploadObject
      x-validation-exclude-body: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  description: Only a single file per upload which must be named "content".
                  type: string
                  format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary

      parameters:
        - in: query
          name: storageClass
          description: Deprecated, this capability will not be supported in future releases.
          required: false
          deprecated: true
          schema:
            type: string
        - in: header
          name: If-None-Match
          description: |
            Currently supports only "*" to allow uploading an object only if one doesn't exist yet.
            Deprecated, this capability will not be supported in future releases.
          example: "*"
          required: false
          deprecated: true
          schema:
            type: string
            pattern: '^\*$' # Currently, only "*" is supported
      responses:
        201:
          description: object metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectStats"
        400:
          description: ValidationError
        401:
          description: Unauthorized ValidationError
        403:
          description: Forbidden
        404:
          description: url not found
        412:
          description: PreconditionFailed
        420:
          description: too many requests
    delete:
      tags:
        - objects
      operationId: deleteObject
      summary: delete object. Missing objects will not return a NotFound error.
      responses:
        204:
          description: object deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: NotFound
        420:
          description: too many requests

  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: perform a login
      security: [] # No authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: successful login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "access_token=abcde12356; Path=/; HttpOnly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
        401:
          description: Unauthorized ValidationError
        420:
          description: too many requests
        default:
          description: Internal Server Error

  /auth/register:
    post:
      tags:
        - auth
      operationId: register
      summary: perform user registration
      security: [] # No authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterInfo"
      responses:
        201:
          description: registration success message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationMsg"
        400:
          description: Bad Request - Validation Error
        420:
          description: too many requests
        default:
          description: Internal Server Error
