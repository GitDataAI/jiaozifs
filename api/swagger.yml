openapi: "3.0.0"

info:
  description: jiaozifs HTTP API
  title: jiaozifs API
  license:
    name: "Apache 2.0"
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: "/api/v1"
    description: jiaozifs server endpoint

security:
  - jwt_token: ["aaaa"]
  - basic_auth: ["aaaaa"]
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookie_auth:
      type: apiKey
      in: cookie
      name: internal_auth_session
    oidc_auth:
      type: apiKey
      in: cookie
      name: oidc_auth_session
    saml_auth:
      type: apiKey
      in: cookie
      name: saml_auth_session

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    VersionResult:
      type: object
      required:
        - version
        - api_version
      properties:
        version:
          type: string
          description: program version
        api_version:
          type: string
          description: runtime version
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: short message explaining the error
          type: string

    LoginInformation:
      type: object
      required:
        - access_key_id
        - secret_access_key
      properties:
        access_key_id:
          type: string
        secret_access_key:
          type: string

    AuthenticationToken:
      type: object
      required:
        - token
      properties:
        token:
          description: a JWT token that could be used to authenticate requests
          type: string
        token_expiration:
          type: integer
          format: int64
          description: Unix Epoch in seconds

paths:
  /version:
    get:
      tags:
        - common
      operationId: getVersion
      summary: return program and runtime version
      security:
        - jwt_token: []
      responses:
        200:
          description: program version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionResult"

  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: perform a login
      security: [] # No authentication
      parameters:
        - name: access_key_id
          in: query
          description: User's ak_id
          required: true
          schema:
            type: string
        - name: secret_access_key
          in: query
          description: User's sk_key
          required: true
          schema:
            type: string
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/LoginInformation"
      responses:
        200:
          description: successful login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "access_token=abcde12356; Path=/; HttpOnly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
        401:
          $ref: "#/components/responses/Unauthorized"
        420:
          description: too many requests
        default:
          $ref: "#/components/responses/ServerError"


