// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20231120160225-add3126ee845 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Basic_authScopes  = "basic_auth.Scopes"
	Cookie_authScopes = "cookie_auth.Scopes"
	Jwt_tokenScopes   = "jwt_token.Scopes"
)

// Defines values for LoginConfigRBAC.
const (
	External   LoginConfigRBAC = "external"
	Simplified LoginConfigRBAC = "simplified"
)

// Defines values for SetupStateState.
const (
	Initialized    SetupStateState = "initialized"
	NotInitialized SetupStateState = "not_initialized"
)

// AuthenticationToken defines model for AuthenticationToken.
type AuthenticationToken struct {
	// Token a JWT token that could be used to authenticate requests
	Token string `json:"token"`

	// TokenExpiration Unix Epoch in seconds
	TokenExpiration *int64 `json:"token_expiration,omitempty"`
}

// BranchCreation defines model for BranchCreation.
type BranchCreation struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

// Change defines model for Change.
type Change struct {
	Action   int     `json:"Action"`
	BaseHash *string `json:"BaseHash,omitempty"`
	Path     string  `json:"Path"`
	ToHash   *string `json:"ToHash,omitempty"`
}

// Commit defines model for Commit.
type Commit struct {
	Author       Signature `json:"Author"`
	Committer    Signature `json:"Committer"`
	CreatedAt    time.Time `json:"CreatedAt"`
	Hash         string    `json:"Hash"`
	MergeTag     string    `json:"MergeTag"`
	Message      string    `json:"Message"`
	ParentHashes []string  `json:"ParentHashes"`
	TreeHash     string    `json:"TreeHash"`
	UpdatedAt    time.Time `json:"UpdatedAt"`
}

// CreateRepository defines model for CreateRepository.
type CreateRepository struct {
	Description *string `json:"Description,omitempty"`
	Name        string  `json:"Name"`
}

// LoginConfig defines model for LoginConfig.
type LoginConfig struct {
	// RBAC RBAC will remain enabled on GUI if "external".  That only works
	// with an external auth service.
	RBAC *LoginConfigRBAC `json:"RBAC,omitempty"`

	// FallbackLoginLabel label to place on fallback_login_url.
	FallbackLoginLabel *string `json:"fallback_login_label,omitempty"`

	// FallbackLoginUrl secondary URL to offer users to use for login.
	FallbackLoginUrl *string `json:"fallback_login_url,omitempty"`

	// LoginCookieNames cookie names used to store JWT
	LoginCookieNames []string `json:"login_cookie_names"`

	// LoginFailedMessage message to display to users who fail to login; a full sentence that is rendered
	// in HTML and may contain a link to a secondary login method
	LoginFailedMessage *string `json:"login_failed_message,omitempty"`

	// LoginUrl primary URL to use for login.
	LoginUrl string `json:"login_url"`

	// LogoutUrl URL to use for logging out.
	LogoutUrl string `json:"logout_url"`
}

// LoginConfigRBAC RBAC will remain enabled on GUI if "external".  That only works
// with an external auth service.
type LoginConfigRBAC string

// ObjectStats defines model for ObjectStats.
type ObjectStats struct {
	Checksum string `json:"checksum"`

	// ContentType Object media type
	ContentType *string             `json:"content_type,omitempty"`
	Metadata    *ObjectUserMetadata `json:"metadata,omitempty"`

	// Mtime Unix Epoch in seconds
	Mtime     int64   `json:"mtime"`
	Path      string  `json:"path"`
	PathMode  *uint32 `json:"path_mode,omitempty"`
	SizeBytes *int64  `json:"size_bytes,omitempty"`
}

// ObjectUserMetadata defines model for ObjectUserMetadata.
type ObjectUserMetadata map[string]string

// Pagination defines model for Pagination.
type Pagination struct {
	// HasMore Next page is available
	HasMore bool `json:"has_more"`

	// MaxPerPage Maximal number of entries per page
	MaxPerPage int `json:"max_per_page"`

	// NextOffset Token used to retrieve the next page
	NextOffset string `json:"next_offset"`

	// Results Number of values found in the results
	Results int `json:"results"`
}

// Ref defines model for Ref.
type Ref struct {
	CommitHash   string             `json:"CommitHash"`
	CreatedAt    time.Time          `json:"CreatedAt"`
	CreatorID    openapi_types.UUID `json:"CreatorID"`
	Description  *string            `json:"Description,omitempty"`
	ID           openapi_types.UUID `json:"ID"`
	Name         string             `json:"Name"`
	RepositoryID openapi_types.UUID `json:"RepositoryID"`
	UpdatedAt    time.Time          `json:"UpdatedAt"`
}

// RefList defines model for RefList.
type RefList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Ref      `json:"results"`
}

// Repository defines model for Repository.
type Repository struct {
	CreatedAt   time.Time          `json:"CreatedAt"`
	CreatorID   openapi_types.UUID `json:"CreatorID"`
	Description *string            `json:"Description,omitempty"`
	Head        string             `json:"Head"`
	ID          openapi_types.UUID `json:"ID"`
	Name        string             `json:"Name"`
	UpdatedAt   time.Time          `json:"UpdatedAt"`
}

// RepositoryList defines model for RepositoryList.
type RepositoryList struct {
	Pagination Pagination   `json:"pagination"`
	Results    []Repository `json:"results"`
}

// SetupState defines model for SetupState.
type SetupState struct {
	// CommPrefsMissing true if the comm prefs are missing.
	CommPrefsMissing *bool            `json:"comm_prefs_missing,omitempty"`
	LoginConfig      *LoginConfig     `json:"login_config,omitempty"`
	State            *SetupStateState `json:"state,omitempty"`
}

// SetupStateState defines model for SetupState.State.
type SetupStateState string

// Signature defines model for Signature.
type Signature struct {
	Email openapi_types.Email `json:"Email"`
	Name  string              `json:"Name"`
	When  time.Time           `json:"When"`
}

// TreeEntry defines model for TreeEntry.
type TreeEntry struct {
	Hash  *string `json:"Hash,omitempty"`
	IsDir *bool   `json:"IsDir,omitempty"`
	Name  *string `json:"Name,omitempty"`
}

// UpdateRepository defines model for UpdateRepository.
type UpdateRepository struct {
	Description *string `json:"Description,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	CreatedAt       *time.Time          `json:"createdAt,omitempty"`
	CurrentSignInAt *time.Time          `json:"currentSignInAt,omitempty"`
	CurrentSignInIP *string             `json:"currentSignInIP,omitempty"`
	Email           openapi_types.Email `json:"email"`
	LastSignInAt    *time.Time          `json:"lastSignInAt,omitempty"`
	LastSignInIP    *string             `json:"lastSignInIP,omitempty"`
	UpdateAt        *time.Time          `json:"updateAt,omitempty"`
	Username        string              `json:"username"`
}

// UserRegisterInfo defines model for UserRegisterInfo.
type UserRegisterInfo struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// VersionResult defines model for VersionResult.
type VersionResult struct {
	// ApiVersion runtime version
	ApiVersion    string  `json:"api_version"`
	LatestVersion *string `json:"latest_version,omitempty"`

	// Version program version
	Version string `json:"version"`
}

// Wip defines model for Wip.
type Wip struct {
	BaseCommit   *string             `json:"BaseCommit,omitempty"`
	CreatedAt    *time.Time          `json:"CreatedAt,omitempty"`
	CreatorID    *openapi_types.UUID `json:"CreatorID,omitempty"`
	CurrentTree  *string             `json:"CurrentTree,omitempty"`
	ID           *openapi_types.UUID `json:"ID,omitempty"`
	Name         *string             `json:"Name,omitempty"`
	RepositoryID *openapi_types.UUID `json:"RepositoryID,omitempty"`
	State        *int                `json:"State,omitempty"`
	UpdatedAt    *time.Time          `json:"UpdatedAt,omitempty"`
}

// PaginationAfter defines model for PaginationAfter.
type PaginationAfter = string

// PaginationAmount defines model for PaginationAmount.
type PaginationAmount = int

// PaginationPrefix defines model for PaginationPrefix.
type PaginationPrefix = string

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// DeleteObjectParams defines parameters for DeleteObject.
type DeleteObjectParams struct {
	// WipID working in process
	WipID openapi_types.UUID `form:"wipID" json:"wipID"`

	// Branch branch to the ref
	Branch string `form:"branch" json:"branch"`

	// Path relative to the ref
	Path string `form:"path" json:"path"`
}

// GetObjectParams defines parameters for GetObject.
type GetObjectParams struct {
	// Branch branch to the ref
	Branch string `form:"branch" json:"branch"`

	// Path relative to the ref
	Path string `form:"path" json:"path"`

	// Range Byte range to retrieve
	Range *string `json:"Range,omitempty"`
}

// HeadObjectParams defines parameters for HeadObject.
type HeadObjectParams struct {
	// Branch branch to the ref
	Branch string `form:"branch" json:"branch"`

	// Path relative to the ref
	Path string `form:"path" json:"path"`

	// Range Byte range to retrieve
	Range *string `json:"Range,omitempty"`
}

// UploadObjectMultipartBody defines parameters for UploadObject.
type UploadObjectMultipartBody struct {
	// Content Only a single file per upload which must be named "content".
	Content *openapi_types.File `json:"content,omitempty"`
}

// UploadObjectParams defines parameters for UploadObject.
type UploadObjectParams struct {
	// WipID working in process
	WipID openapi_types.UUID `form:"wipID" json:"wipID"`

	// Branch branch to the ref
	Branch string `form:"branch" json:"branch"`

	// Path relative to the ref
	Path string `form:"path" json:"path"`

	// IfNoneMatch Currently supports only "*" to allow uploading an object only if one doesn't exist yet.
	// Deprecated, this capability will not be supported in future releases.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// DeleteBranchParams defines parameters for DeleteBranch.
type DeleteBranchParams struct {
	RefName string `form:"refName" json:"refName"`
}

// GetBranchParams defines parameters for GetBranch.
type GetBranchParams struct {
	RefName string `form:"refName" json:"refName"`
}

// ListBranchesParams defines parameters for ListBranches.
type ListBranchesParams struct {
	// Prefix return items prefixed with this value
	Prefix *PaginationPrefix `form:"prefix,omitempty" json:"prefix,omitempty"`

	// After return items after this value
	After *PaginationAfter `form:"after,omitempty" json:"after,omitempty"`

	// Amount how many items to return
	Amount *PaginationAmount `form:"amount,omitempty" json:"amount,omitempty"`
}

// GetCommitsInRepositoryParams defines parameters for GetCommitsInRepository.
type GetCommitsInRepositoryParams struct {
	// RefName ref(branch/tag) name
	RefName *string `form:"refName,omitempty" json:"refName,omitempty"`
}

// GetCommitDiffParams defines parameters for GetCommitDiff.
type GetCommitDiffParams struct {
	// Path specific path, if not specific return entries in root
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetEntriesInRefParams defines parameters for GetEntriesInRef.
type GetEntriesInRefParams struct {
	// Path specific path, if not specific return entries in root
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// Ref specific ref default to main branch
	Ref *string `form:"ref,omitempty" json:"ref,omitempty"`
}

// ListRepositoryOfAuthenticatedUserParams defines parameters for ListRepositoryOfAuthenticatedUser.
type ListRepositoryOfAuthenticatedUserParams struct {
	// Prefix return items prefixed with this value
	Prefix *PaginationPrefix `form:"prefix,omitempty" json:"prefix,omitempty"`

	// After return items after this value
	After *PaginationAfter `form:"after,omitempty" json:"after,omitempty"`

	// Amount how many items to return
	Amount *PaginationAmount `form:"amount,omitempty" json:"amount,omitempty"`
}

// ListRepositoryParams defines parameters for ListRepository.
type ListRepositoryParams struct {
	// Prefix return items prefixed with this value
	Prefix *PaginationPrefix `form:"prefix,omitempty" json:"prefix,omitempty"`

	// After return items after this value
	After *PaginationAfter `form:"after,omitempty" json:"after,omitempty"`

	// Amount how many items to return
	Amount *PaginationAmount `form:"amount,omitempty" json:"amount,omitempty"`
}

// DeleteWipParams defines parameters for DeleteWip.
type DeleteWipParams struct {
	// RefName ref name
	RefName string `form:"refName" json:"refName"`
}

// GetWipParams defines parameters for GetWip.
type GetWipParams struct {
	// RefName ref name
	RefName string `form:"refName" json:"refName"`
}

// CreateWipParams defines parameters for CreateWip.
type CreateWipParams struct {
	// Name wip name
	Name string `form:"name" json:"name"`

	// RefName ref name
	RefName string `form:"refName" json:"refName"`
}

// GetWipChangesParams defines parameters for GetWipChanges.
type GetWipChangesParams struct {
	// RefName ref name
	RefName string `form:"refName" json:"refName"`

	// Path path
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// CommitWipParams defines parameters for CommitWip.
type CommitWipParams struct {
	// Msg commit message
	Msg *string `form:"msg,omitempty" json:"msg,omitempty"`

	// RefName ref name
	RefName string `form:"refName" json:"refName"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// UploadObjectMultipartRequestBody defines body for UploadObject for multipart/form-data ContentType.
type UploadObjectMultipartRequestBody UploadObjectMultipartBody

// UpdateRepositoryJSONRequestBody defines body for UpdateRepository for application/json ContentType.
type UpdateRepositoryJSONRequestBody = UpdateRepository

// CreateBranchJSONRequestBody defines body for CreateBranch for application/json ContentType.
type CreateBranchJSONRequestBody = BranchCreation

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = UserRegisterInfo

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = CreateRepository

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObject request
	DeleteObject(ctx context.Context, owner string, repository string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObject request
	GetObject(ctx context.Context, owner string, repository string, params *GetObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadObject request
	HeadObject(ctx context.Context, owner string, repository string, params *HeadObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadObjectWithBody request with any body
	UploadObjectWithBody(ctx context.Context, owner string, repository string, params *UploadObjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepository request
	DeleteRepository(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepository request
	GetRepository(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryWithBody request with any body
	UpdateRepositoryWithBody(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepository(ctx context.Context, owner string, repository string, body UpdateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBranch request
	DeleteBranch(ctx context.Context, owner string, repository string, params *DeleteBranchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranch request
	GetBranch(ctx context.Context, owner string, repository string, params *GetBranchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBranchWithBody request with any body
	CreateBranchWithBody(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBranch(ctx context.Context, owner string, repository string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBranches request
	ListBranches(ctx context.Context, owner string, repository string, params *ListBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommitsInRepository request
	GetCommitsInRepository(ctx context.Context, owner string, repository string, params *GetCommitsInRepositoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommitDiff request
	GetCommitDiff(ctx context.Context, owner string, repository string, basehead string, params *GetCommitDiffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntriesInRef request
	GetEntriesInRef(ctx context.Context, owner string, repository string, params *GetEntriesInRefParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSetupState request
	GetSetupState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterWithBody request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRepositoryOfAuthenticatedUser request
	ListRepositoryOfAuthenticatedUser(ctx context.Context, params *ListRepositoryOfAuthenticatedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRepositoryWithBody request with any body
	CreateRepositoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRepository(ctx context.Context, body CreateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfo request
	GetUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRepository request
	ListRepository(ctx context.Context, owner string, params *ListRepositoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWip request
	DeleteWip(ctx context.Context, owner string, repository string, params *DeleteWipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWip request
	GetWip(ctx context.Context, owner string, repository string, params *GetWipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWip request
	CreateWip(ctx context.Context, owner string, repository string, params *CreateWipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWipChanges request
	GetWipChanges(ctx context.Context, owner string, repository string, params *GetWipChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitWip request
	CommitWip(ctx context.Context, owner string, repository string, params *CommitWipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWip request
	ListWip(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObject(ctx context.Context, owner string, repository string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObject(ctx context.Context, owner string, repository string, params *GetObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadObject(ctx context.Context, owner string, repository string, params *HeadObjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadObjectRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadObjectWithBody(ctx context.Context, owner string, repository string, params *UploadObjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadObjectRequestWithBody(c.Server, owner, repository, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepository(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryRequest(c.Server, owner, repository)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepository(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryRequest(c.Server, owner, repository)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryWithBody(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryRequestWithBody(c.Server, owner, repository, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepository(ctx context.Context, owner string, repository string, body UpdateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryRequest(c.Server, owner, repository, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBranch(ctx context.Context, owner string, repository string, params *DeleteBranchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBranchRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranch(ctx context.Context, owner string, repository string, params *GetBranchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranchWithBody(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequestWithBody(c.Server, owner, repository, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranch(ctx context.Context, owner string, repository string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequest(c.Server, owner, repository, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBranches(ctx context.Context, owner string, repository string, params *ListBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBranchesRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommitsInRepository(ctx context.Context, owner string, repository string, params *GetCommitsInRepositoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommitsInRepositoryRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommitDiff(ctx context.Context, owner string, repository string, basehead string, params *GetCommitDiffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommitDiffRequest(c.Server, owner, repository, basehead, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntriesInRef(ctx context.Context, owner string, repository string, params *GetEntriesInRefParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntriesInRefRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSetupState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSetupStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRepositoryOfAuthenticatedUser(ctx context.Context, params *ListRepositoryOfAuthenticatedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRepositoryOfAuthenticatedUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepository(ctx context.Context, body CreateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRepository(ctx context.Context, owner string, params *ListRepositoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRepositoryRequest(c.Server, owner, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWip(ctx context.Context, owner string, repository string, params *DeleteWipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWipRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWip(ctx context.Context, owner string, repository string, params *GetWipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWipRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWip(ctx context.Context, owner string, repository string, params *CreateWipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWipRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWipChanges(ctx context.Context, owner string, repository string, params *GetWipChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWipChangesRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitWip(ctx context.Context, owner string, repository string, params *CommitWipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitWipRequest(c.Server, owner, repository, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWip(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWipRequest(c.Server, owner, repository)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteObjectRequest generates requests for DeleteObject
func NewDeleteObjectRequest(server string, owner string, repository string, params *DeleteObjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wipID", runtime.ParamLocationQuery, params.WipID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectRequest generates requests for GetObject
func NewGetObjectRequest(server string, owner string, repository string, params *GetObjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

	}

	return req, nil
}

// NewHeadObjectRequest generates requests for HeadObject
func NewHeadObjectRequest(server string, owner string, repository string, params *HeadObjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

	}

	return req, nil
}

// NewUploadObjectRequestWithBody generates requests for UploadObject with any type of body
func NewUploadObjectRequestWithBody(server string, owner string, repository string, params *UploadObjectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wipID", runtime.ParamLocationQuery, params.WipID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, params.Branch); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteRepositoryRequest generates requests for DeleteRepository
func NewDeleteRepositoryRequest(server string, owner string, repository string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryRequest generates requests for GetRepository
func NewGetRepositoryRequest(server string, owner string, repository string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryRequest calls the generic UpdateRepository builder with application/json body
func NewUpdateRepositoryRequest(server string, owner string, repository string, body UpdateRepositoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryRequestWithBody(server, owner, repository, "application/json", bodyReader)
}

// NewUpdateRepositoryRequestWithBody generates requests for UpdateRepository with any type of body
func NewUpdateRepositoryRequestWithBody(server string, owner string, repository string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBranchRequest generates requests for DeleteBranch
func NewDeleteBranchRequest(server string, owner string, repository string, params *DeleteBranchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/branch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchRequest generates requests for GetBranch
func NewGetBranchRequest(server string, owner string, repository string, params *GetBranchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/branch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBranchRequest calls the generic CreateBranch builder with application/json body
func NewCreateBranchRequest(server string, owner string, repository string, body CreateBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBranchRequestWithBody(server, owner, repository, "application/json", bodyReader)
}

// NewCreateBranchRequestWithBody generates requests for CreateBranch with any type of body
func NewCreateBranchRequestWithBody(server string, owner string, repository string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/branch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBranchesRequest generates requests for ListBranches
func NewListBranchesRequest(server string, owner string, repository string, params *ListBranchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/branches", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommitsInRepositoryRequest generates requests for GetCommitsInRepository
func NewGetCommitsInRepositoryRequest(server string, owner string, repository string, params *GetCommitsInRepositoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/commits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RefName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, *params.RefName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommitDiffRequest generates requests for GetCommitDiff
func NewGetCommitDiffRequest(server string, owner string, repository string, basehead string, params *GetCommitDiffParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "basehead", runtime.ParamLocationPath, basehead)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/compare/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntriesInRefRequest generates requests for GetEntriesInRef
func NewGetEntriesInRefRequest(server string, owner string, repository string, params *GetEntriesInRefParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repos/%s/%s/contents/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ref != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ref", runtime.ParamLocationQuery, *params.Ref); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSetupStateRequest generates requests for GetSetupState
func NewGetSetupStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRepositoryOfAuthenticatedUserRequest generates requests for ListRepositoryOfAuthenticatedUser
func NewListRepositoryOfAuthenticatedUserRequest(server string, params *ListRepositoryOfAuthenticatedUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRepositoryRequest calls the generic CreateRepository builder with application/json body
func NewCreateRepositoryRequest(server string, body CreateRepositoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRepositoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRepositoryRequestWithBody generates requests for CreateRepository with any type of body
func NewCreateRepositoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/repos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserInfoRequest generates requests for GetUserInfo
func NewGetUserInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRepositoryRequest generates requests for ListRepository
func NewListRepositoryRequest(server string, owner string, params *ListRepositoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/repos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWipRequest generates requests for DeleteWip
func NewDeleteWipRequest(server string, owner string, repository string, params *DeleteWipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWipRequest generates requests for GetWip
func NewGetWipRequest(server string, owner string, repository string, params *GetWipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWipRequest generates requests for CreateWip
func NewCreateWipRequest(server string, owner string, repository string, params *CreateWipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWipChangesRequest generates requests for GetWipChanges
func NewGetWipChangesRequest(server string, owner string, repository string, params *GetWipChangesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s/changes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitWipRequest generates requests for CommitWip
func NewCommitWipRequest(server string, owner string, repository string, params *CommitWipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s/commit", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Msg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "msg", runtime.ParamLocationQuery, *params.Msg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refName", runtime.ParamLocationQuery, params.RefName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWipRequest generates requests for ListWip
func NewListWipRequest(server string, owner string, repository string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "owner", runtime.ParamLocationPath, owner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repository", runtime.ParamLocationPath, repository)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wip/%s/%s/list", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// DeleteObjectWithResponse request
	DeleteObjectWithResponse(ctx context.Context, owner string, repository string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*DeleteObjectResponse, error)

	// GetObjectWithResponse request
	GetObjectWithResponse(ctx context.Context, owner string, repository string, params *GetObjectParams, reqEditors ...RequestEditorFn) (*GetObjectResponse, error)

	// HeadObjectWithResponse request
	HeadObjectWithResponse(ctx context.Context, owner string, repository string, params *HeadObjectParams, reqEditors ...RequestEditorFn) (*HeadObjectResponse, error)

	// UploadObjectWithBodyWithResponse request with any body
	UploadObjectWithBodyWithResponse(ctx context.Context, owner string, repository string, params *UploadObjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadObjectResponse, error)

	// DeleteRepositoryWithResponse request
	DeleteRepositoryWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*DeleteRepositoryResponse, error)

	// GetRepositoryWithResponse request
	GetRepositoryWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*GetRepositoryResponse, error)

	// UpdateRepositoryWithBodyWithResponse request with any body
	UpdateRepositoryWithBodyWithResponse(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryResponse, error)

	UpdateRepositoryWithResponse(ctx context.Context, owner string, repository string, body UpdateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryResponse, error)

	// DeleteBranchWithResponse request
	DeleteBranchWithResponse(ctx context.Context, owner string, repository string, params *DeleteBranchParams, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error)

	// GetBranchWithResponse request
	GetBranchWithResponse(ctx context.Context, owner string, repository string, params *GetBranchParams, reqEditors ...RequestEditorFn) (*GetBranchResponse, error)

	// CreateBranchWithBodyWithResponse request with any body
	CreateBranchWithBodyWithResponse(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	CreateBranchWithResponse(ctx context.Context, owner string, repository string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	// ListBranchesWithResponse request
	ListBranchesWithResponse(ctx context.Context, owner string, repository string, params *ListBranchesParams, reqEditors ...RequestEditorFn) (*ListBranchesResponse, error)

	// GetCommitsInRepositoryWithResponse request
	GetCommitsInRepositoryWithResponse(ctx context.Context, owner string, repository string, params *GetCommitsInRepositoryParams, reqEditors ...RequestEditorFn) (*GetCommitsInRepositoryResponse, error)

	// GetCommitDiffWithResponse request
	GetCommitDiffWithResponse(ctx context.Context, owner string, repository string, basehead string, params *GetCommitDiffParams, reqEditors ...RequestEditorFn) (*GetCommitDiffResponse, error)

	// GetEntriesInRefWithResponse request
	GetEntriesInRefWithResponse(ctx context.Context, owner string, repository string, params *GetEntriesInRefParams, reqEditors ...RequestEditorFn) (*GetEntriesInRefResponse, error)

	// GetSetupStateWithResponse request
	GetSetupStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupStateResponse, error)

	// RegisterWithBodyWithResponse request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// ListRepositoryOfAuthenticatedUserWithResponse request
	ListRepositoryOfAuthenticatedUserWithResponse(ctx context.Context, params *ListRepositoryOfAuthenticatedUserParams, reqEditors ...RequestEditorFn) (*ListRepositoryOfAuthenticatedUserResponse, error)

	// CreateRepositoryWithBodyWithResponse request with any body
	CreateRepositoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryResponse, error)

	CreateRepositoryWithResponse(ctx context.Context, body CreateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryResponse, error)

	// GetUserInfoWithResponse request
	GetUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error)

	// ListRepositoryWithResponse request
	ListRepositoryWithResponse(ctx context.Context, owner string, params *ListRepositoryParams, reqEditors ...RequestEditorFn) (*ListRepositoryResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// DeleteWipWithResponse request
	DeleteWipWithResponse(ctx context.Context, owner string, repository string, params *DeleteWipParams, reqEditors ...RequestEditorFn) (*DeleteWipResponse, error)

	// GetWipWithResponse request
	GetWipWithResponse(ctx context.Context, owner string, repository string, params *GetWipParams, reqEditors ...RequestEditorFn) (*GetWipResponse, error)

	// CreateWipWithResponse request
	CreateWipWithResponse(ctx context.Context, owner string, repository string, params *CreateWipParams, reqEditors ...RequestEditorFn) (*CreateWipResponse, error)

	// GetWipChangesWithResponse request
	GetWipChangesWithResponse(ctx context.Context, owner string, repository string, params *GetWipChangesParams, reqEditors ...RequestEditorFn) (*GetWipChangesResponse, error)

	// CommitWipWithResponse request
	CommitWipWithResponse(ctx context.Context, owner string, repository string, params *CommitWipParams, reqEditors ...RequestEditorFn) (*CommitWipResponse, error)

	// ListWipWithResponse request
	ListWipWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*ListWipResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationToken
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectStats
}

// Status returns HTTPResponse.Status
func (r UploadObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repository
}

// Status returns HTTPResponse.Status
func (r GetRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ref
}

// Status returns HTTPResponse.Status
func (r GetBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BranchCreation
}

// Status returns HTTPResponse.Status
func (r CreateBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefList
}

// Status returns HTTPResponse.Status
func (r ListBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommitsInRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Commit
}

// Status returns HTTPResponse.Status
func (r GetCommitsInRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommitsInRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommitDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Change
}

// Status returns HTTPResponse.Status
func (r GetCommitDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommitDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntriesInRefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreeEntry
}

// Status returns HTTPResponse.Status
func (r GetEntriesInRefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntriesInRefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSetupStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupState
}

// Status returns HTTPResponse.Status
func (r GetSetupStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSetupStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRepositoryOfAuthenticatedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RepositoryList
}

// Status returns HTTPResponse.Status
func (r ListRepositoryOfAuthenticatedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRepositoryOfAuthenticatedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Repository
}

// Status returns HTTPResponse.Status
func (r CreateRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInfo
}

// Status returns HTTPResponse.Status
func (r GetUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RepositoryList
}

// Status returns HTTPResponse.Status
func (r ListRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResult
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Wip
}

// Status returns HTTPResponse.Status
func (r GetWipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Wip
}

// Status returns HTTPResponse.Status
func (r CreateWipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWipChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Change
}

// Status returns HTTPResponse.Status
func (r GetWipChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWipChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommitWipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Wip
}

// Status returns HTTPResponse.Status
func (r CommitWipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitWipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Wip
}

// Status returns HTTPResponse.Status
func (r ListWipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// DeleteObjectWithResponse request returning *DeleteObjectResponse
func (c *ClientWithResponses) DeleteObjectWithResponse(ctx context.Context, owner string, repository string, params *DeleteObjectParams, reqEditors ...RequestEditorFn) (*DeleteObjectResponse, error) {
	rsp, err := c.DeleteObject(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectResponse(rsp)
}

// GetObjectWithResponse request returning *GetObjectResponse
func (c *ClientWithResponses) GetObjectWithResponse(ctx context.Context, owner string, repository string, params *GetObjectParams, reqEditors ...RequestEditorFn) (*GetObjectResponse, error) {
	rsp, err := c.GetObject(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectResponse(rsp)
}

// HeadObjectWithResponse request returning *HeadObjectResponse
func (c *ClientWithResponses) HeadObjectWithResponse(ctx context.Context, owner string, repository string, params *HeadObjectParams, reqEditors ...RequestEditorFn) (*HeadObjectResponse, error) {
	rsp, err := c.HeadObject(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadObjectResponse(rsp)
}

// UploadObjectWithBodyWithResponse request with arbitrary body returning *UploadObjectResponse
func (c *ClientWithResponses) UploadObjectWithBodyWithResponse(ctx context.Context, owner string, repository string, params *UploadObjectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadObjectResponse, error) {
	rsp, err := c.UploadObjectWithBody(ctx, owner, repository, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadObjectResponse(rsp)
}

// DeleteRepositoryWithResponse request returning *DeleteRepositoryResponse
func (c *ClientWithResponses) DeleteRepositoryWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*DeleteRepositoryResponse, error) {
	rsp, err := c.DeleteRepository(ctx, owner, repository, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryResponse(rsp)
}

// GetRepositoryWithResponse request returning *GetRepositoryResponse
func (c *ClientWithResponses) GetRepositoryWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*GetRepositoryResponse, error) {
	rsp, err := c.GetRepository(ctx, owner, repository, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryResponse(rsp)
}

// UpdateRepositoryWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryResponse
func (c *ClientWithResponses) UpdateRepositoryWithBodyWithResponse(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryResponse, error) {
	rsp, err := c.UpdateRepositoryWithBody(ctx, owner, repository, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryWithResponse(ctx context.Context, owner string, repository string, body UpdateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryResponse, error) {
	rsp, err := c.UpdateRepository(ctx, owner, repository, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryResponse(rsp)
}

// DeleteBranchWithResponse request returning *DeleteBranchResponse
func (c *ClientWithResponses) DeleteBranchWithResponse(ctx context.Context, owner string, repository string, params *DeleteBranchParams, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error) {
	rsp, err := c.DeleteBranch(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBranchResponse(rsp)
}

// GetBranchWithResponse request returning *GetBranchResponse
func (c *ClientWithResponses) GetBranchWithResponse(ctx context.Context, owner string, repository string, params *GetBranchParams, reqEditors ...RequestEditorFn) (*GetBranchResponse, error) {
	rsp, err := c.GetBranch(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchResponse(rsp)
}

// CreateBranchWithBodyWithResponse request with arbitrary body returning *CreateBranchResponse
func (c *ClientWithResponses) CreateBranchWithBodyWithResponse(ctx context.Context, owner string, repository string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranchWithBody(ctx, owner, repository, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

func (c *ClientWithResponses) CreateBranchWithResponse(ctx context.Context, owner string, repository string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranch(ctx, owner, repository, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

// ListBranchesWithResponse request returning *ListBranchesResponse
func (c *ClientWithResponses) ListBranchesWithResponse(ctx context.Context, owner string, repository string, params *ListBranchesParams, reqEditors ...RequestEditorFn) (*ListBranchesResponse, error) {
	rsp, err := c.ListBranches(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBranchesResponse(rsp)
}

// GetCommitsInRepositoryWithResponse request returning *GetCommitsInRepositoryResponse
func (c *ClientWithResponses) GetCommitsInRepositoryWithResponse(ctx context.Context, owner string, repository string, params *GetCommitsInRepositoryParams, reqEditors ...RequestEditorFn) (*GetCommitsInRepositoryResponse, error) {
	rsp, err := c.GetCommitsInRepository(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommitsInRepositoryResponse(rsp)
}

// GetCommitDiffWithResponse request returning *GetCommitDiffResponse
func (c *ClientWithResponses) GetCommitDiffWithResponse(ctx context.Context, owner string, repository string, basehead string, params *GetCommitDiffParams, reqEditors ...RequestEditorFn) (*GetCommitDiffResponse, error) {
	rsp, err := c.GetCommitDiff(ctx, owner, repository, basehead, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommitDiffResponse(rsp)
}

// GetEntriesInRefWithResponse request returning *GetEntriesInRefResponse
func (c *ClientWithResponses) GetEntriesInRefWithResponse(ctx context.Context, owner string, repository string, params *GetEntriesInRefParams, reqEditors ...RequestEditorFn) (*GetEntriesInRefResponse, error) {
	rsp, err := c.GetEntriesInRef(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntriesInRefResponse(rsp)
}

// GetSetupStateWithResponse request returning *GetSetupStateResponse
func (c *ClientWithResponses) GetSetupStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSetupStateResponse, error) {
	rsp, err := c.GetSetupState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSetupStateResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// ListRepositoryOfAuthenticatedUserWithResponse request returning *ListRepositoryOfAuthenticatedUserResponse
func (c *ClientWithResponses) ListRepositoryOfAuthenticatedUserWithResponse(ctx context.Context, params *ListRepositoryOfAuthenticatedUserParams, reqEditors ...RequestEditorFn) (*ListRepositoryOfAuthenticatedUserResponse, error) {
	rsp, err := c.ListRepositoryOfAuthenticatedUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRepositoryOfAuthenticatedUserResponse(rsp)
}

// CreateRepositoryWithBodyWithResponse request with arbitrary body returning *CreateRepositoryResponse
func (c *ClientWithResponses) CreateRepositoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryResponse, error) {
	rsp, err := c.CreateRepositoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryResponse(rsp)
}

func (c *ClientWithResponses) CreateRepositoryWithResponse(ctx context.Context, body CreateRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryResponse, error) {
	rsp, err := c.CreateRepository(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryResponse(rsp)
}

// GetUserInfoWithResponse request returning *GetUserInfoResponse
func (c *ClientWithResponses) GetUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error) {
	rsp, err := c.GetUserInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoResponse(rsp)
}

// ListRepositoryWithResponse request returning *ListRepositoryResponse
func (c *ClientWithResponses) ListRepositoryWithResponse(ctx context.Context, owner string, params *ListRepositoryParams, reqEditors ...RequestEditorFn) (*ListRepositoryResponse, error) {
	rsp, err := c.ListRepository(ctx, owner, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRepositoryResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// DeleteWipWithResponse request returning *DeleteWipResponse
func (c *ClientWithResponses) DeleteWipWithResponse(ctx context.Context, owner string, repository string, params *DeleteWipParams, reqEditors ...RequestEditorFn) (*DeleteWipResponse, error) {
	rsp, err := c.DeleteWip(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWipResponse(rsp)
}

// GetWipWithResponse request returning *GetWipResponse
func (c *ClientWithResponses) GetWipWithResponse(ctx context.Context, owner string, repository string, params *GetWipParams, reqEditors ...RequestEditorFn) (*GetWipResponse, error) {
	rsp, err := c.GetWip(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWipResponse(rsp)
}

// CreateWipWithResponse request returning *CreateWipResponse
func (c *ClientWithResponses) CreateWipWithResponse(ctx context.Context, owner string, repository string, params *CreateWipParams, reqEditors ...RequestEditorFn) (*CreateWipResponse, error) {
	rsp, err := c.CreateWip(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWipResponse(rsp)
}

// GetWipChangesWithResponse request returning *GetWipChangesResponse
func (c *ClientWithResponses) GetWipChangesWithResponse(ctx context.Context, owner string, repository string, params *GetWipChangesParams, reqEditors ...RequestEditorFn) (*GetWipChangesResponse, error) {
	rsp, err := c.GetWipChanges(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWipChangesResponse(rsp)
}

// CommitWipWithResponse request returning *CommitWipResponse
func (c *ClientWithResponses) CommitWipWithResponse(ctx context.Context, owner string, repository string, params *CommitWipParams, reqEditors ...RequestEditorFn) (*CommitWipResponse, error) {
	rsp, err := c.CommitWip(ctx, owner, repository, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommitWipResponse(rsp)
}

// ListWipWithResponse request returning *ListWipResponse
func (c *ClientWithResponses) ListWipWithResponse(ctx context.Context, owner string, repository string, reqEditors ...RequestEditorFn) (*ListWipResponse, error) {
	rsp, err := c.ListWip(ctx, owner, repository, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWipResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectResponse parses an HTTP response from a DeleteObjectWithResponse call
func ParseDeleteObjectResponse(rsp *http.Response) (*DeleteObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectResponse parses an HTTP response from a GetObjectWithResponse call
func ParseGetObjectResponse(rsp *http.Response) (*GetObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadObjectResponse parses an HTTP response from a HeadObjectWithResponse call
func ParseHeadObjectResponse(rsp *http.Response) (*HeadObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadObjectResponse parses an HTTP response from a UploadObjectWithResponse call
func ParseUploadObjectResponse(rsp *http.Response) (*UploadObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryResponse parses an HTTP response from a DeleteRepositoryWithResponse call
func ParseDeleteRepositoryResponse(rsp *http.Response) (*DeleteRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoryResponse parses an HTTP response from a GetRepositoryWithResponse call
func ParseGetRepositoryResponse(rsp *http.Response) (*GetRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryResponse parses an HTTP response from a UpdateRepositoryWithResponse call
func ParseUpdateRepositoryResponse(rsp *http.Response) (*UpdateRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteBranchResponse parses an HTTP response from a DeleteBranchWithResponse call
func ParseDeleteBranchResponse(rsp *http.Response) (*DeleteBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBranchResponse parses an HTTP response from a GetBranchWithResponse call
func ParseGetBranchResponse(rsp *http.Response) (*GetBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ref
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBranchResponse parses an HTTP response from a CreateBranchWithResponse call
func ParseCreateBranchResponse(rsp *http.Response) (*CreateBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BranchCreation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBranchesResponse parses an HTTP response from a ListBranchesWithResponse call
func ParseListBranchesResponse(rsp *http.Response) (*ListBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommitsInRepositoryResponse parses an HTTP response from a GetCommitsInRepositoryWithResponse call
func ParseGetCommitsInRepositoryResponse(rsp *http.Response) (*GetCommitsInRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommitsInRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Commit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommitDiffResponse parses an HTTP response from a GetCommitDiffWithResponse call
func ParseGetCommitDiffResponse(rsp *http.Response) (*GetCommitDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommitDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Change
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEntriesInRefResponse parses an HTTP response from a GetEntriesInRefWithResponse call
func ParseGetEntriesInRefResponse(rsp *http.Response) (*GetEntriesInRefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntriesInRefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreeEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSetupStateResponse parses an HTTP response from a GetSetupStateWithResponse call
func ParseGetSetupStateResponse(rsp *http.Response) (*GetSetupStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSetupStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRepositoryOfAuthenticatedUserResponse parses an HTTP response from a ListRepositoryOfAuthenticatedUserWithResponse call
func ParseListRepositoryOfAuthenticatedUserResponse(rsp *http.Response) (*ListRepositoryOfAuthenticatedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRepositoryOfAuthenticatedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RepositoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRepositoryResponse parses an HTTP response from a CreateRepositoryWithResponse call
func ParseCreateRepositoryResponse(rsp *http.Response) (*CreateRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUserInfoResponse parses an HTTP response from a GetUserInfoWithResponse call
func ParseGetUserInfoResponse(rsp *http.Response) (*GetUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRepositoryResponse parses an HTTP response from a ListRepositoryWithResponse call
func ParseListRepositoryResponse(rsp *http.Response) (*ListRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RepositoryList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWipResponse parses an HTTP response from a DeleteWipWithResponse call
func ParseDeleteWipResponse(rsp *http.Response) (*DeleteWipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWipResponse parses an HTTP response from a GetWipWithResponse call
func ParseGetWipResponse(rsp *http.Response) (*GetWipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Wip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWipResponse parses an HTTP response from a CreateWipWithResponse call
func ParseCreateWipResponse(rsp *http.Response) (*CreateWipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Wip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetWipChangesResponse parses an HTTP response from a GetWipChangesWithResponse call
func ParseGetWipChangesResponse(rsp *http.Response) (*GetWipChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWipChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Change
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitWipResponse parses an HTTP response from a CommitWipWithResponse call
func ParseCommitWipResponse(rsp *http.Response) (*CommitWipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommitWipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Wip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWipResponse parses an HTTP response from a ListWipWithResponse call
func ParseListWipResponse(rsp *http.Response) (*ListWipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Wip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// perform a login
	// (POST /auth/login)
	Login(ctx context.Context, w *JiaozifsResponse, r *http.Request, body LoginJSONRequestBody)
	// perform a logout
	// (POST /auth/logout)
	Logout(ctx context.Context, w *JiaozifsResponse, r *http.Request)
	// delete object. Missing objects will not return a NotFound error.
	// (DELETE /object/{owner}/{repository})
	DeleteObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteObjectParams)
	// get object content
	// (GET /object/{owner}/{repository})
	GetObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetObjectParams)
	// check if object exists
	// (HEAD /object/{owner}/{repository})
	HeadObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params HeadObjectParams)

	// (POST /object/{owner}/{repository})
	UploadObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params UploadObjectParams)
	// delete repository
	// (DELETE /repos/{owner}/{repository})
	DeleteRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string)
	// get repository
	// (GET /repos/{owner}/{repository})
	GetRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string)
	// update repository
	// (POST /repos/{owner}/{repository})
	UpdateRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, body UpdateRepositoryJSONRequestBody, owner string, repository string)
	// delete branch
	// (DELETE /repos/{owner}/{repository}/branch)
	DeleteBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteBranchParams)
	// get branch
	// (GET /repos/{owner}/{repository}/branch)
	GetBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetBranchParams)
	// create branch
	// (POST /repos/{owner}/{repository}/branch)
	CreateBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, body CreateBranchJSONRequestBody, owner string, repository string)
	// list branches
	// (GET /repos/{owner}/{repository}/branches)
	ListBranches(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params ListBranchesParams)
	// get commits in repository
	// (GET /repos/{owner}/{repository}/commits)
	GetCommitsInRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetCommitsInRepositoryParams)
	// get commit differences
	// (GET /repos/{owner}/{repository}/compare/{basehead})
	GetCommitDiff(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, basehead string, params GetCommitDiffParams)
	// list entries in ref
	// (GET /repos/{owner}/{repository}/contents/)
	GetEntriesInRef(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetEntriesInRefParams)
	// check if jiaozifs setup
	// (GET /setup)
	GetSetupState(ctx context.Context, w *JiaozifsResponse, r *http.Request)
	// perform user registration
	// (POST /users/register)
	Register(ctx context.Context, w *JiaozifsResponse, r *http.Request, body RegisterJSONRequestBody)
	// list repository
	// (GET /users/repos)
	ListRepositoryOfAuthenticatedUser(ctx context.Context, w *JiaozifsResponse, r *http.Request, params ListRepositoryOfAuthenticatedUserParams)
	// create repository
	// (POST /users/repos)
	CreateRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, body CreateRepositoryJSONRequestBody)
	// get information of the currently logged-in user
	// (GET /users/user)
	GetUserInfo(ctx context.Context, w *JiaozifsResponse, r *http.Request)
	// list repository in specific owner
	// (GET /users/{owner}/repos)
	ListRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, params ListRepositoryParams)
	// return program and runtime version
	// (GET /version)
	GetVersion(ctx context.Context, w *JiaozifsResponse, r *http.Request)
	// remove working in process
	// (DELETE /wip/{owner}/{repository})
	DeleteWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteWipParams)
	// get working in process
	// (GET /wip/{owner}/{repository})
	GetWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetWipParams)
	// create working in process
	// (POST /wip/{owner}/{repository})
	CreateWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params CreateWipParams)
	// get working in process changes
	// (GET /wip/{owner}/{repository}/changes)
	GetWipChanges(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetWipChangesParams)
	// commit working in process to branch
	// (POST /wip/{owner}/{repository}/commit)
	CommitWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params CommitWipParams)
	// list wip in specific project and user
	// (GET /wip/{owner}/{repository}/list)
	ListWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// perform a login
// (POST /auth/login)
func (_ Unimplemented) Login(ctx context.Context, w *JiaozifsResponse, r *http.Request, body LoginJSONRequestBody) {
	w.WriteHeader(http.StatusNotImplemented)
}

// perform a logout
// (POST /auth/logout)
func (_ Unimplemented) Logout(ctx context.Context, w *JiaozifsResponse, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delete object. Missing objects will not return a NotFound error.
// (DELETE /object/{owner}/{repository})
func (_ Unimplemented) DeleteObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteObjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get object content
// (GET /object/{owner}/{repository})
func (_ Unimplemented) GetObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetObjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// check if object exists
// (HEAD /object/{owner}/{repository})
func (_ Unimplemented) HeadObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params HeadObjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /object/{owner}/{repository})
func (_ Unimplemented) UploadObject(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params UploadObjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delete repository
// (DELETE /repos/{owner}/{repository})
func (_ Unimplemented) DeleteRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get repository
// (GET /repos/{owner}/{repository})
func (_ Unimplemented) GetRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update repository
// (POST /repos/{owner}/{repository})
func (_ Unimplemented) UpdateRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, body UpdateRepositoryJSONRequestBody, owner string, repository string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delete branch
// (DELETE /repos/{owner}/{repository}/branch)
func (_ Unimplemented) DeleteBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteBranchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get branch
// (GET /repos/{owner}/{repository}/branch)
func (_ Unimplemented) GetBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetBranchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create branch
// (POST /repos/{owner}/{repository}/branch)
func (_ Unimplemented) CreateBranch(ctx context.Context, w *JiaozifsResponse, r *http.Request, body CreateBranchJSONRequestBody, owner string, repository string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// list branches
// (GET /repos/{owner}/{repository}/branches)
func (_ Unimplemented) ListBranches(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params ListBranchesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get commits in repository
// (GET /repos/{owner}/{repository}/commits)
func (_ Unimplemented) GetCommitsInRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetCommitsInRepositoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get commit differences
// (GET /repos/{owner}/{repository}/compare/{basehead})
func (_ Unimplemented) GetCommitDiff(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, basehead string, params GetCommitDiffParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// list entries in ref
// (GET /repos/{owner}/{repository}/contents/)
func (_ Unimplemented) GetEntriesInRef(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetEntriesInRefParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// check if jiaozifs setup
// (GET /setup)
func (_ Unimplemented) GetSetupState(ctx context.Context, w *JiaozifsResponse, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// perform user registration
// (POST /users/register)
func (_ Unimplemented) Register(ctx context.Context, w *JiaozifsResponse, r *http.Request, body RegisterJSONRequestBody) {
	w.WriteHeader(http.StatusNotImplemented)
}

// list repository
// (GET /users/repos)
func (_ Unimplemented) ListRepositoryOfAuthenticatedUser(ctx context.Context, w *JiaozifsResponse, r *http.Request, params ListRepositoryOfAuthenticatedUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create repository
// (POST /users/repos)
func (_ Unimplemented) CreateRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, body CreateRepositoryJSONRequestBody) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get information of the currently logged-in user
// (GET /users/user)
func (_ Unimplemented) GetUserInfo(ctx context.Context, w *JiaozifsResponse, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// list repository in specific owner
// (GET /users/{owner}/repos)
func (_ Unimplemented) ListRepository(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, params ListRepositoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// return program and runtime version
// (GET /version)
func (_ Unimplemented) GetVersion(ctx context.Context, w *JiaozifsResponse, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// remove working in process
// (DELETE /wip/{owner}/{repository})
func (_ Unimplemented) DeleteWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params DeleteWipParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get working in process
// (GET /wip/{owner}/{repository})
func (_ Unimplemented) GetWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetWipParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create working in process
// (POST /wip/{owner}/{repository})
func (_ Unimplemented) CreateWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params CreateWipParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get working in process changes
// (GET /wip/{owner}/{repository}/changes)
func (_ Unimplemented) GetWipChanges(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params GetWipChangesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// commit working in process to branch
// (POST /wip/{owner}/{repository}/commit)
func (_ Unimplemented) CommitWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string, params CommitWipParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// list wip in specific project and user
// (GET /wip/{owner}/{repository}/list)
func (_ Unimplemented) ListWip(ctx context.Context, w *JiaozifsResponse, r *http.Request, owner string, repository string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Body parse -------------
	var body LoginJSONRequestBody
	parseBody := r.ContentLength != 0
	if parseBody {
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Error unmarshalling body 'Login' as JSON", http.StatusBadRequest)
			return
		}
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(r.Context(), &JiaozifsResponse{w}, r, body)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(r.Context(), &JiaozifsResponse{w}, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteObject operation middleware
func (siw *ServerInterfaceWrapper) DeleteObject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectParams

	// ------------- Required query parameter "wipID" -------------

	if paramValue := r.URL.Query().Get("wipID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "wipID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "wipID", r.URL.Query(), &params.WipID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wipID", Err: err})
		return
	}

	// ------------- Required query parameter "branch" -------------

	if paramValue := r.URL.Query().Get("branch"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "branch"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "branch", r.URL.Query(), &params.Branch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "branch", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteObject(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObject operation middleware
func (siw *ServerInterfaceWrapper) GetObject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams

	// ------------- Required query parameter "branch" -------------

	if paramValue := r.URL.Query().Get("branch"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "branch"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "branch", r.URL.Query(), &params.Branch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "branch", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Range" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Range")]; found {
		var Range string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Range", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Range", valueList[0], &Range, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Range", Err: err})
			return
		}

		params.Range = &Range

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObject(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HeadObject operation middleware
func (siw *ServerInterfaceWrapper) HeadObject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeadObjectParams

	// ------------- Required query parameter "branch" -------------

	if paramValue := r.URL.Query().Get("branch"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "branch"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "branch", r.URL.Query(), &params.Branch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "branch", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "Range" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Range")]; found {
		var Range string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Range", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Range", valueList[0], &Range, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Range", Err: err})
			return
		}

		params.Range = &Range

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HeadObject(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadObject operation middleware
func (siw *ServerInterfaceWrapper) UploadObject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadObjectParams

	// ------------- Required query parameter "wipID" -------------

	if paramValue := r.URL.Query().Get("wipID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "wipID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "wipID", r.URL.Query(), &params.WipID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wipID", Err: err})
		return
	}

	// ------------- Required query parameter "branch" -------------

	if paramValue := r.URL.Query().Get("branch"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "branch"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "branch", r.URL.Query(), &params.Branch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "branch", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "If-None-Match", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "If-None-Match", Err: err})
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadObject(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRepository(r.Context(), &JiaozifsResponse{w}, r, owner, repository)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepository operation middleware
func (siw *ServerInterfaceWrapper) GetRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepository(r.Context(), &JiaozifsResponse{w}, r, owner, repository)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Body parse -------------
	var body UpdateRepositoryJSONRequestBody
	parseBody := true
	if parseBody {
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Error unmarshalling body 'UpdateRepository' as JSON", http.StatusBadRequest)
			return
		}
	}

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRepository(r.Context(), &JiaozifsResponse{w}, r, body, owner, repository)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBranch operation middleware
func (siw *ServerInterfaceWrapper) DeleteBranch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteBranchParams

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBranch(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBranch operation middleware
func (siw *ServerInterfaceWrapper) GetBranch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBranchParams

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBranch(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBranch operation middleware
func (siw *ServerInterfaceWrapper) CreateBranch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Body parse -------------
	var body CreateBranchJSONRequestBody
	parseBody := true
	if parseBody {
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Error unmarshalling body 'CreateBranch' as JSON", http.StatusBadRequest)
			return
		}
	}

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBranch(r.Context(), &JiaozifsResponse{w}, r, body, owner, repository)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBranches operation middleware
func (siw *ServerInterfaceWrapper) ListBranches(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBranchesParams

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", r.URL.Query(), &params.Prefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prefix", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", r.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "amount", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBranches(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommitsInRepository operation middleware
func (siw *ServerInterfaceWrapper) GetCommitsInRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommitsInRepositoryParams

	// ------------- Optional query parameter "refName" -------------

	err = runtime.BindQueryParameter("form", true, false, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommitsInRepository(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommitDiff operation middleware
func (siw *ServerInterfaceWrapper) GetCommitDiff(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	// ------------- Path parameter "basehead" -------------
	var basehead string

	err = runtime.BindStyledParameterWithOptions("simple", "basehead", chi.URLParam(r, "basehead"), &basehead, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "basehead", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommitDiffParams

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommitDiff(r.Context(), &JiaozifsResponse{w}, r, owner, repository, basehead, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntriesInRef operation middleware
func (siw *ServerInterfaceWrapper) GetEntriesInRef(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntriesInRefParams

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", r.URL.Query(), &params.Ref)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ref", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntriesInRef(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSetupState operation middleware
func (siw *ServerInterfaceWrapper) GetSetupState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSetupState(r.Context(), &JiaozifsResponse{w}, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Body parse -------------
	var body RegisterJSONRequestBody
	parseBody := r.ContentLength != 0
	if parseBody {
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Error unmarshalling body 'Register' as JSON", http.StatusBadRequest)
			return
		}
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(r.Context(), &JiaozifsResponse{w}, r, body)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRepositoryOfAuthenticatedUser operation middleware
func (siw *ServerInterfaceWrapper) ListRepositoryOfAuthenticatedUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRepositoryOfAuthenticatedUserParams

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", r.URL.Query(), &params.Prefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prefix", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", r.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "amount", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRepositoryOfAuthenticatedUser(r.Context(), &JiaozifsResponse{w}, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Body parse -------------
	var body CreateRepositoryJSONRequestBody
	parseBody := true
	if parseBody {
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			http.Error(w, "Error unmarshalling body 'CreateRepository' as JSON", http.StatusBadRequest)
			return
		}
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRepository(r.Context(), &JiaozifsResponse{w}, r, body)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(r.Context(), &JiaozifsResponse{w}, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRepository operation middleware
func (siw *ServerInterfaceWrapper) ListRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRepositoryParams

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", r.URL.Query(), &params.Prefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prefix", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", r.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "amount", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRepository(r.Context(), &JiaozifsResponse{w}, r, owner, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(r.Context(), &JiaozifsResponse{w}, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWip operation middleware
func (siw *ServerInterfaceWrapper) DeleteWip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteWipParams

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWip(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWip operation middleware
func (siw *ServerInterfaceWrapper) GetWip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWipParams

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWip(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWip operation middleware
func (siw *ServerInterfaceWrapper) CreateWip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWipParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWip(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWipChanges operation middleware
func (siw *ServerInterfaceWrapper) GetWipChanges(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWipChangesParams

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWipChanges(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CommitWip operation middleware
func (siw *ServerInterfaceWrapper) CommitWip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CommitWipParams

	// ------------- Optional query parameter "msg" -------------

	err = runtime.BindQueryParameter("form", true, false, "msg", r.URL.Query(), &params.Msg)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msg", Err: err})
		return
	}

	// ------------- Required query parameter "refName" -------------

	if paramValue := r.URL.Query().Get("refName"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "refName"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "refName", r.URL.Query(), &params.RefName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CommitWip(r.Context(), &JiaozifsResponse{w}, r, owner, repository, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWip operation middleware
func (siw *ServerInterfaceWrapper) ListWip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameterWithOptions("simple", "repository", chi.URLParam(r, "repository"), &repository, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_tokenScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	ctx = context.WithValue(ctx, Cookie_authScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWip(r.Context(), &JiaozifsResponse{w}, r, owner, repository)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// RawSpec hack to get swagger json for swagger ui
func RawSpec() ([]byte, error) {
	return rawSpec()
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/object/{owner}/{repository}", wrapper.DeleteObject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/{owner}/{repository}", wrapper.GetObject)
	})
	r.Group(func(r chi.Router) {
		r.Head(options.BaseURL+"/object/{owner}/{repository}", wrapper.HeadObject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/{owner}/{repository}", wrapper.UploadObject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/repos/{owner}/{repository}", wrapper.DeleteRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}", wrapper.GetRepository)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/repos/{owner}/{repository}", wrapper.UpdateRepository)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/repos/{owner}/{repository}/branch", wrapper.DeleteBranch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}/branch", wrapper.GetBranch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/repos/{owner}/{repository}/branch", wrapper.CreateBranch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}/branches", wrapper.ListBranches)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}/commits", wrapper.GetCommitsInRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}/compare/{basehead}", wrapper.GetCommitDiff)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{owner}/{repository}/contents/", wrapper.GetEntriesInRef)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/setup", wrapper.GetSetupState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/register", wrapper.Register)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/repos", wrapper.ListRepositoryOfAuthenticatedUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/repos", wrapper.CreateRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/user", wrapper.GetUserInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{owner}/repos", wrapper.ListRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.GetVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/wip/{owner}/{repository}", wrapper.DeleteWip)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wip/{owner}/{repository}", wrapper.GetWip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wip/{owner}/{repository}", wrapper.CreateWip)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wip/{owner}/{repository}/changes", wrapper.GetWipChanges)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wip/{owner}/{repository}/commit", wrapper.CommitWip)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wip/{owner}/{repository}/list", wrapper.ListWip)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xce3Pbtpb/Khjundm2q5edtLPXnc6d2HEb7zqpx3aaP2KvBiIPJSQkwAuAltWMv/sO",
	"HnyDFCXLr9v7TyYmQeDgPH44L+ib57M4YRSoFN7BNy/BHMcggeu/zvCcUCwJo29CCVw9CkD4nCTqmXfg",
	"cZApp4hIiAXCagySCyLQDY5S8AYeUYP+mQJfeQOP4hi8A08P8wae8BcQYzWnXCXqhZCc0Ll3dzcoLxyz",
	"lMrmygu2RDGmK7u2ZMjQ0raomaa8agAhTiPpHexNJgMvxrckTmP9l/qTUPPncG+Q0UeohDnwGoFnHEJy",
	"u4Y1iR4EAVoSuVjPIjO8k0d32UstqDepXACVxNckXbKvQLU0OUuASwJ6kMweVwnF6H8+XSL9EskFlshn",
	"aRSgGaBUQKA4i4vZAXH4ZwpCCm9Qp2lgVpjCbUI4NrPXF/tIyS06Tpi/QIQiAT6jgZoqZDzG0jD5p9ee",
	"k+dqZcIh8A4+271c5+PY7Av4UtFwyDH1F0cccgqqXDAs/tYkXrCU++DWx/LSeoJ8uIuEowWmc2gu/cbP",
	"SCpv17HZgXeIBbzDYuGk9AxL94tL1vJNbQt6gkFGj3MLLI6JdGwhlQumgeBvHELvwPuPcQEgY6uR4wsy",
	"p1imHIqpLHz0/0oJEII3ssKuAEsYSqIF0Nh9K7/eA5/DJZ63vBQCz6GF0RyoVPOa3Wtjdo60DzDneKUl",
	"waFdfh+TYLO91cSnJx54l2rQIBNJmdGlLRcbLBFV21mZ22XqnIqhR55DwgSRjK+aKvK2bPCO3X9wG2Bt",
	"j3qUi4BTNif0iNGQzJtrnx++OWqCjnqKliSKEIcYE4qA4lkEAWIU/fbxBJEQXXlwK4FTHF15I4QuFQ4y",
	"Gq3QkvGv4opq3MYUZaM0JiIB/Ib4MLpSxw5QdV589gSJk4iEBAL10I4vbaXgRIijaIb9r9NI7Wka4RlE",
	"Ter1YwXDSYR9UDTXvkt5NPLWT59yx+QGgTFfoY/np2oRFobAFfJzfaimAlDIONJTOFcxk/uMfSUwVdgo",
	"mquYt0i/zU8VIRkHdfaoQ7C3YZnlQkwiCKZxYbvVBe0LtUxARBLhld0MF2i5YEh9r57o2X5GGIVpFCEB",
	"VAL1wRyDRCAONAAOwRUlFL27fH+KMA1QjFfIZ1QqTcIoIvSrPiRRwUs9LYpBLligdaOFa06RJJzEJYH0",
	"kgBLpXuy5iRzQueIpXK0FmYKGp1SrizsstTf9f8uJLauZcVS/QX4X4WyGIfQFXeByql5Ud+TmRfFEBCM",
	"pAHBxhQxSBxgidcdOmayjwL4++wL9bXG4d15LwMvaTuz1YtpzAKoHAYpofLVvnMmQf6E6WwlDR83dZxy",
	"vluSLAGWjWbf7cKs8Ongm4eDgCje4Ois6mq2mHExX+FAN3VjgcU0ZtwhgA9wK1GiLJsIhG8wiRSQF7ue",
	"MRYBplqE+HaaAJ8mToB4r9x9HCGaxjPgiIUIqOQEBEqA6xW8UhAwccmBwq2csjAU4AhPtAueQx0HNfeN",
	"AhZANNuDS205iDSSDgj9kBOqAweBQpbSQKmhmjP7rJvmmirkbK4xq6CiukmXWpwry6rLzzgire7PFq6d",
	"/oTxk7dVI0lJ4Bq9zgPpOc2Htkih8H56znRfh+/krVdbdVBmsiW1zKZNXLpzCE+JcDj7ScVGu1C0ZM1V",
	"Jc4P9q6vlRI1jvoaC0q0FAu4d9Pumj655r0DHDyISu5Ew6wWaSK3V6aM/U+tU7ka7Ey1LkCmifJnHLG9",
	"z+J4mnAIxTQmQigeNzBc8hRUsKEQW43XaSGBMAdkvxk5j7LM+cpinq59l8Mj5Sxk1GbRCaFEEhyRP3V4",
	"Qpmclp9cu/SkyYc8UG+w4TjGJKroIOgnm+jypwXQLdXYavCxXVPP5JKkioSPqXRhROuxdSLeEl56UxJQ",
	"e0jbWNlYz/bxs3NOAfyEhsyhlZsDnp9yDlQqGZ/QrT88Oas6p8nNa9c30F9dIiy2IKr4qidFqZbPJkuo",
	"qJL2ymnkI7ONX7cI8xzmRMg2oW7AtAQLsWRcnzkxoadA5yoM+e/dbqO0jmtHfwAXhNFzjazN7eCETG/M",
	"EEcWPaWK7ygb4BSxBCHLUzSGtE6fcDbnOG6fvrb1YlyZatemP5GkudVDLKDIrD6+Y3xkTFSh3/NwjPPD",
	"dG1CfBsHpyYUdRyCn3IiVxfqtDQymWFB/ClOTXiuj1GN7upxMetCysRkJnQGJBtOiuxWUb1RVHOKIz1q",
	"KkBUVQsn5H9BeyVflnKaF2VmgDnwX7OdmbxYQY5+W6dHbYlYjKgq9heC2Z8kFOjd5eUZenN24g28iPhA",
	"BRRFEO9Ngv0FoP3RxBt4On+kJxYH4/FyuRxh/XrE+HxsvxXj05Oj4w8Xx8P90WS0kHGkvSsiIygvatbL",
	"rc7bG01GEzWSJUBxQrwD75V+ZLIPWg5jxa2xdnW04TDjPSrz0b7ZSeAdmOSvZ2wShDxkwco4XzpfZNAk",
	"iWwZbPxFGJsvqmh1X7RAx93gYQcO3pnPRMIUH9Ws+5PJRsR3uX2uAqBesZbuTX0fhAjTyOQTvYG3ABzY",
	"cu8FyOGRUebKwnCL4yRqVe1f8MwPYG//1Y8//YzOsFz8Mv4ZvZMy+Z1GK4dhKrJeT/Zc6TWsaxnKFUV/",
	"4IgEejfHnDONAa/3Jw6nmjFTCM4Lk3rXtrZbH31iN4AugN8AR3buEjR4B5+vB55I4xgr78xLgCu4QTjn",
	"mMRzoeSuQeBafZvrLktlp/Kq924t6JKT+up58szNJbNLB5uMLYy/sSUFfjf+xvPz4s4sG4E5DqqMe6uf",
	"mwykNrKiR+Fzndgl418JnSNCUcKZYmJLjX1JEh3aFpaswrNyyX3N6XV33ZDk6ybzzJaR2VqACsFGq14y",
	"NYNeNQf9yviMBAFQM8Kx9Acmf2UpDTZRg4pQDdHIbGGE3psY1f4tTEWNMmk7LxBG2YoIlIqMSkpgv/Gu",
	"7wbeHBzG8RvIfgI+XElAHFNT3ckyq7rUlqGUTo7/MhnuTfZfZdI3MFeI/1yX6MviTrBUeu4deP9nJvju",
	"u6ur4Ieh+mfwD/SP7//r+7/10oIuVGe+BDkUkgOOqyCba9uMUMyduDlw61a2VAXLj8zDYebyO5fqqBkc",
	"23p5V5fOKRZy+J4FptjZOVgN35/89FicSTCXBEfoITmUfX+eNXvcW5UehOuvJvuOijgEhCvO6MJlwmEo",
	"yJxCoIuOIeM6RcUyeywx7ZT5efKue92eyNYOmQpZwhy/9iatA3W/kZ1v7yfXZjW6QYC0qBRKoQssiQiJ",
	"rh5tC49zkE0FcwHewmZ9q4j3DnDwLwV5LcIhplnsRWBTHxRBOuL6K0LJv6RJdzi+WbSj+3yAG6+mBgK6",
	"no5IiOr67gKCmpUTo2S6Cm9tVHvGnV5pQ4rOeQrPetPJqiyY6W5KBTumzBy2eNNm3P3W4hBhSW5g/Wp2",
	"r/3Xuh60xGQfk4j1heFHDC00bxIOPpbF51VqbC4vWiGRJgnjUpiGtSvvhytPn+tRxJYo1RtUZGOa6age",
	"p1SWAgoYCPqfVm/RCuToir7Nlx6YXmUfJ3hGIiJXhdM/g2xh0G0IYSpTroQWARYgbE9cfkD90HYqnYTD",
	"D4zC8D2WWoGc0Hd19UPrQdQnE3Qf53LgxWkkiToMxmr0MGt+aUsrlWioNS4pvmOkgqgIUEgi0N0mRkRo",
	"uSD+AsWp0LxV3AnQVTbZlTcq9xl1ENsj7bS3s7RTucWrPUCJS51Vr12+gitvsVWyY7tAOeVR/Why+Mxn",
	"XPd76X6nX3X/4YaeY+NEGHi3w5t8F0O49aM0gOFM67KyeZ000VC+Zc7kvHoM9Ew76bZJE/vzShl9Z8Lr",
	"IyxXKqJyrGX8VA87EwtrubATWyh3HDRNQQULz4WZNVocnHz2jkrHgV6rr29fLOgSdmOZu2pVQFvvhiZn",
	"Ss/PRkua5DQUpRuextYpXItSh5nz6FK7mm/FIbRNHhspy/pErfV0LdBsmad97QpVzE0hHaN052Mvd56W",
	"t7vJvfNMfuYBdOdjH18suwTj0IXClhEvV6AKurul+XKh27Q/HJYjyV3Ddu1yYC/Q3nvQ1WsXZTQLrIQz",
	"ENrsGOivsZO/dww9YjSMiC8F+kTkAl1irmDi8RS9wgm3rvc6fYwUnRB3SoTFOH2bpWY4LkEWQ8aNC8DK",
	"SHp/Y65Tb/aJucH80Kipu3ZbkRNF+vWLhU9FPpoVMn+hCLpG833dYtau+L+BNF1o4oRWPOXO9BeH8DvD",
	"p7HE8++RbXnp9gYe7vTv1QVum+2aHeDO+CzjW/PItW8QoS8+cFqvOwnmMP42wwIWgIO79Wr0loThOu0R",
	"CfgkJD5SuxggEuqMS/7UthBkl7AUnxmT3enfp9Ytc8u/h24Z7UGBYtOuQ7ofXSGdrVfk9Qto8SRLhAEH",
	"6lcw0bx8MXULx2SZCu/YQLQSiXGXXRwbPVbw+rwsY9C6OocQ2bMVSXXuElp4Xy0g//RGWFzk6G2Hj55V",
	"6Zd1bvopZZFrXr9Ey9TmJECmSZe9lG5WPaB7W1rFoR1597KmFpmbUxsVkluxmPiAUlrcV+7qN80LylV6",
	"auJn1AZA+jcNxtxeGGlvPs2ulDxUPrR+a6W98FT3KtVHhtC1Ae8hDpAt/aNhqQCEnkeLsJIFKm/I3QWb",
	"iSxh3bFp4Zr/Hpb6uyFQzP7rBKwbXvc8tRHqusNAQ+xzybXXiXFFFh05swcvdzSWeYDM2f2v9TZkTGH5",
	"bERsE1rryikGHNS/XedlfuPzAU/LfA0HYy+K+wm6CzI02GeG3597xmu6d6KcUNMwoU4IZq9d510zEZvP",
	"IRgS/SsdvAupszBgE8T+NzzfE54LOynlHJ8JPOsf/8nipsy/fpRUkPamS7dZ2/Dhj/ye6oPBQ/VWr6sH",
	"v3a3tsuDskFu9gmmAXLc/HX5v0uSbNkb84kkWzbFLEnytPrIIWY3gJwNiRmXFJFd1d327e9EPdT0DqVw",
	"kPzkrTC92Ljemneautoqam/k6/vl6HdWujUq1d1DS5Iuouj9ewj2Hl+Fkf2ZjSfILP3out3Tq2/duKM9",
	"dL8LZce+ToJ3lpo+keTIjlpfYdq1xg6adzrk4qnKCn2qCf30zfLzGUJnTts2EPoccpXtql78JPKLu8bx",
	"qGeB5lOPs8BWn+L894ldpMVi/mQ22XIAWLozv1A7q5YE8/vuFJZP4iPe5zgwe3LYs2TNJpweB0Nkf/2t",
	"NVbegf/ZK/T8ZASxLt58bo6pDjmVt1SONRPO9IUKpXK1rMULAtlqHPit/DM4n6/VYuWf5DFPKj+78/la",
	"Wb1RZheulAonRt9pkDDzu0LFb9wcjMcR83G0YEIevHr9971XY5yQ8c2e10TPtRPmn17f/X8AAAD///1S",
	"64hRYwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
